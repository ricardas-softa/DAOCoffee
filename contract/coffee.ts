import {
    Blockfrost,
    C,
    Data,
    Lucid,
    SpendingValidator,
    TxHash,
    fromHex,
    toHex,
    fromText,
    MintingPolicy,
    PolicyId,
    TxHash,
    Unit,
  } from "https://deno.land/x/lucid@0.8.3/mod.ts";
  import * as cbor from "https://deno.land/x/cbor@v1.4.1/index.js";
  import "https://deno.land/std@0.181.0/dotenv/load.ts";
   
  const lucid = await Lucid.new(
    new Blockfrost(
      "https://cardano-preview.blockfrost.io/api/v0",
      Deno.env.get("BLOCKFROST_API_KEY")
    ),
    "Preview"
  );

const api = await window.cardano.nami.enable();
lucid.selectWallet(api);

const { paymentCredential } = lucid.utils.getAddressDetails(
  await lucid.wallet.address(),
);

const mintCoffeeBag = async () : Promise<any> => {
    if (lucid) {
      const coffeeCbor = "5908295908260100003232323233223232323232323232323322323232323232232223232533533223232323500322222222222233355301812001323212330012233350052200200200100235001220011233001225335002102d100102a25335333573466e3c03cd400488d4008880080ac0a84ccd5cd19b8700e3500122350022200102b02a102a00c3235001220015009323500122002500835001220023333573466e1cd55ce9baa0044800080708c98c8070cd5ce00e80e00d1999ab9a3370e6aae7540092000233221233001003002323232323232323232323232323333573466e1cd55cea8062400046666666666664444444444442466666666666600201a01801601401201000e00c00a00800600466a02e0306ae854030cd405c060d5d0a80599a80b80c9aba1500a3335501b75ca0346ae854024ccd5406dd7280d1aba1500833501702235742a00e666aa036046eb4d5d0a8031919191999ab9a3370e6aae75400920002332212330010030023232323333573466e1cd55cea8012400046644246600200600466a05aeb4d5d0a80118171aba135744a004464c6406466ae700cc0c80c04d55cf280089baa00135742a0046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c8cd5ce01981901809aab9e5001137540026ae84d5d1280111931901719ab9c02f02e02c135573ca00226ea8004d5d0a80299a80bbae35742a008666aa03603e40026ae85400cccd5406dd710009aba150023021357426ae8940088c98c80a8cd5ce01581501409aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226aae7940044dd50009aba150023011357426ae8940088c98c8070cd5ce00e80e00d080d89931900d99ab9c491035054350001b135573ca00226ea80044c030004c8004d5405888448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80b111999aab9f0012500a233500930043574200460066ae880080588c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8058cd5ce00b80b00a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c806ccd5ce00e00d80c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7007807406c0680644d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201733573803002e02a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355013223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301413574200222440042442446600200800624464646666ae68cdc3a800a40004642446004006600a6ae84d55cf280191999ab9a3370ea0049001109100091931900919ab9c01301201000f135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900919ab9c01301201000f00e00d135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900719ab9c00f00e00c135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8030cd5ce00680600509baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8054cd5ce00b00a80980900880800780700689aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401c66ae7003c03803002c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200b33573801801601201026aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401866ae700340300280240204d55cea80089baa0012323333573466e1d40052002200523333573466e1d40092000200523263200833573801201000c00a26aae74dd5000891001091000a4c2400292010350543100112323001001223300330020020011"

   const MintRedeemer = () => Data.to(new Constr(0, []))
      const BurnRedeemer = () => Data.to(new Constr(1, []))

      const utxos = await lucid.wallet.getUtxos(); 
      
      if(utxos.length == 0) throw 'No UTxO available';
      
      const daoAddress = "addr123213"
      const daoPKH : KeyHash = paymentCredentialOf(daoAddress).hash
      const mintingPolicy: MintingPolicy = {
        type: "PlutusV2",
        script: applyParamsToScript(coffeeCbor, [daoPKH]),
      };

      const policyId: PolicyId = lucid.utils.mintingPolicyToId(mintingPolicy);
      const mintIdx = 0; 
      const tokenName = fromText('Coffee #{mintIdx}');
      const assetToMint: Unit = policyId + tokenName;
      
      const tx = await lucid
        .newTx()
        .mintAssets({ [assetToMint]: BigInt(1) }, MintRedeemer())
        .payToAddress(daoAddress, {lovelace: BigInt(45_000_000)})
        .attachMintingPolicy(mintingPolicy)
        .addSignerKey(daoPKH)
        .attachMetadata(721, { 
         name: "CoffeeDAO",
         media_type: " ",
         descryption: " ",
         source: " ",
         farm_location: " ",
         coffee_profile: " ",
         expiration_date: " ",  
         })
        .complete();

      const daoWitness = await tx.partialSign()
      return {transaction: tx, witness: daoWitness} 
    }
  }
  
  const mintCoffeeBagFrontEnd = async (partialTx : any) : Promise<any> => {
    if (lucid) {
      const userWitness = await partialTx.transaction.partialSign();
      const signedTx = partialTx.transaction.assemble([userWitness, partialTx.witness]).complete();
      const txHash = signedTx.submit();
    }
  }